nameOverride: ""
fullnameOverride: "firefly"

firefly:
  fullnameOverride: "firefly"

  ipfs:
    bootstrap: ""

  config:
    ipfsApiUrl: http://127.0.0.1:5001
    ipfsGatewayUrl: http://127.0.0.1:8080
    postgresUrl: postgres://postgres:f1refly@127.0.0.1:5432?sslmode=disable
    postgresAutomigrate: true

  core:
    jobs:
      postgresMigrations:
        enabled: false
      registration:
        enabled: true

    service:
      httpPort: 3000
      adminPort: 3001
      debugPort: 3030
      metricsPort: 3100

    initContainers: ""

    extraContainers: |
      - name: ipfs
        image: ipfs/go-ipfs:v0.12.1
        env:
          # bc this is hardcoded, multiple firefly _networks_ cannot be installed on the same k8s cluster via ff-perfnode
          # w/o running the risk of the IPFS nodes across the networks joining each other
          - name: IPFS_SWARM_KEY
            value: |-
              /key/swarm/psk/1.0.0/
              /base16/
              965eee84178a43cc1af273c85905e4ec9e13fdfe309f08856109bec5b7b4756d
          - name: LIBP2P_FORCE_PNET
            value: "1"
        {{- if .Values.ipfs.bootstrap }}
        lifecycle:
          postStart:
            exec:
              command:
                - 'sh'
                - '-c'
                - |
                  until ipfs swarm addrs; do
                    echo "waiting for IPFS to come up..."
                    sleep 5
                  done
                  sleep 5
                  ipfs swarm peering add {{ .Values.ipfs.bootstrap }}
                  ipfs swarm connect {{ .Values.ipfs.bootstrap }}
        {{- end }}
        volumeMounts:
          - mountPath: /export
            name: ipfs
            subPath: export
          - mountPath: /data/ipfs
            name: ipfs
            subPath: data
        ports:
          - containerPort: 4001
            protocol: TCP
            name: p2p
          - containerPort: 4001
            protocol: UDP
            name: p2p-udp
          - containerPort: 5001
            protocol: TCP
            name: api
          - containerPort: 8080
            protocol: TCP
            name: gateway
      - name: postgres
        image: postgres:14.2-alpine3.15
        env:
          - name: POSTGRES_PASSWORD
            value: "f1refly"
          - name: PGDATA
            value: /var/lib/postgresql/data/pgdata
        volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: postgres
        ports:
          - containerPort: 5432
            protocol: TCP
            name: psql
        livenessProbe:
          exec:
            command:
              - pg_isready
              - -U
              - postgres
          failureThreshold: 12
          timeoutSeconds: 3
          periodSeconds: 5

    volumeClaimTemplates: |
      - metadata:
          name: ipfs
        spec:
          accessModes:
            - ReadWriteOnce
          storageClassName: io2
          resources:
            requests:
              storage: 10Gi
      - metadata:
          name: postgres
        spec:
          accessModes:
            - ReadWriteOnce
          storageClassName: io2
          resources:
            requests:
              storage: 10Gi

  dataexchange:
    enabled: true

    persistentVolumes:
      blobs:
        size: 4Gi
        storageClass: io2
      peers:
        storageClass: gp3

  erc1155:
    enabled: true

  ethconnect:
    initContainers: ""
    # TODO geth init

    extraContainers: ""
    # TODO geth

    extraVolumeClaimTemplates: ""
    # TODO geth

  # TODO which connectors? or leave it open ended?
  # TODO ERC1155
