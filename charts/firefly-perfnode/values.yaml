# Copyright Â© 2022 Kaleido, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://swww.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

nameOverride: ""
fullnameOverride: ""

firefly:
  fullnameOverride: ""

  # only set this after the first perfnode has been deployed
  # use `kubectl exec ... -- /bin/sh -c 'ipfs id' | jq '.Addresses'`
  ipfs:
    bootstrap: ""

  config:
    ipfsApiUrl: http://127.0.0.1:5001
    ipfsGatewayUrl: http://127.0.0.1:8080
    postgresUrl: postgres://postgres:f1refly@127.0.0.1:5432?sslmode=disable
    postgresAutomigrate: true

  core:
    jobs:
      postgresMigrations:
        enabled: false
      registration:
        enabled: true

    service:
      httpPort: 3000
      adminPort: 3001
      debugPort: 3030
      metricsPort: 3100

    initContainers: ""

    # Because the swarm key is hardcoded, multiple firefly _networks_ installed on the same k8s cluster via
    # firefly-perfnode run the risk of the IPFS nodes across the networks joining each other...
    # However, multicast is not supported on most k8s clusters by default so users may potentially have no issue.
    # NetworkPolicies can also be if need be to ensure this
    # (see postStart hook for how swarming is "automated")
    extraContainers: |
      - name: ipfs
        image: ipfs/go-ipfs:v0.12.1
        env:
          - name: IPFS_SWARM_KEY
            value: |-
              /key/swarm/psk/1.0.0/
              /base16/
              965eee84178a43cc1af273c85905e4ec9e13fdfe309f08856109bec5b7b4756d
          - name: LIBP2P_FORCE_PNET
            value: "1"
        {{- if .Values.ipfs.bootstrap }}
        lifecycle:
          postStart:
            exec:
              command:
                - 'sh'
                - '-c'
                - |
                  until ipfs swarm addrs; do
                    echo "waiting for IPFS to come up..."
                    sleep 5
                  done
                  sleep 5
                  ipfs swarm peering add {{ .Values.ipfs.bootstrap }}
                  ipfs swarm connect {{ .Values.ipfs.bootstrap }}
        {{- end }}
        volumeMounts:
          - mountPath: /export
            name: ipfs
            subPath: export
          - mountPath: /data/ipfs
            name: ipfs
            subPath: data
        ports:
          - containerPort: 4001
            protocol: TCP
            name: p2p
          - containerPort: 4001
            protocol: UDP
            name: p2p-udp
          - containerPort: 5001
            protocol: TCP
            name: api
          - containerPort: 8080
            protocol: TCP
            name: gateway
      - name: postgres
        image: postgres:14.2-alpine3.15
        env:
          - name: POSTGRES_PASSWORD
            value: "f1refly"
          - name: PGDATA
            value: /var/lib/postgresql/data/pgdata
        volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: postgres
        ports:
          - containerPort: 5432
            protocol: TCP
            name: psql
        livenessProbe:
          exec:
            command:
              - pg_isready
              - -U
              - postgres
          failureThreshold: 12
          timeoutSeconds: 3
          periodSeconds: 5

    volumeClaimTemplates: |
      - metadata:
          name: ipfs
        spec:
          accessModes:
            - ReadWriteOnce
          storageClassName: io2
          resources:
            requests:
              storage: 10Gi
      - metadata:
          name: postgres
        spec:
          accessModes:
            - ReadWriteOnce
          storageClassName: io2
          resources:
            requests:
              storage: 10Gi

  dataexchange:
    enabled: true

    persistentVolumes:
      blobs:
        size: 4Gi
        storageClass: io2
      peers:
        storageClass: gp3

  erc1155:
    enabled: true
